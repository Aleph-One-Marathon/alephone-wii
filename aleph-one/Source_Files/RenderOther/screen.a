;SCREEN.A
;
;	Copyright (C) 1991-2001 and beyond by Bungie Studios, Inc.
;	and the "Aleph One" developers.
; 
;	This program is free software; you can redistribute it and/or modify
;	it under the terms of the GNU General Public License as published by
;	the Free Software Foundation; either version 3 of the License, or
;	(at your option) any later version.
;
;	This program is distributed in the hope that it will be useful,
;	but WITHOUT ANY WARRANTY; without even the implied warranty of
;	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;	GNU General Public License for more details.
;
;	This license is contained in the file "GNU_GeneralPublicLicense.txt",
;	which is included with this source code; it is available online at
;	http://www.gnu.org/licenses/gpl.html
;
;Friday, October 1, 1993 1:26:46 PM

;Sunday, June 26, 1994 10:38:14 PM
;  quadruple screen is now slightly faster

;Wednesday, March 15, 1995 8:19:13 PM  (Jason')
;  unrolled quadruple copy, to no avail (must profile and try on other machines)

	machine	mc68020
	string	c

	include	'cseries.a'

	seg	'screen'

EVERY_OTHER_LINE_BIT	equ	7
SIXTEEN_BIT_BIT	equ	6
THIRTYTWO_BIT_BIT	equ	5

;consult the headers of copy_screen and quadruple_screen for field usage
copy_screen_data	record	0
source	ds.l	1
destination	ds.l	1
width	ds.w	1
height	ds.w	1
bytes_per_row	ds.w	1
source_slop	ds.w	1
destination_slop	ds.w	1
flags	ds.w	1
	endr

;--------------------------------------------------------------------
;QUADRUPLE_SCREEN
;  SOURCE is the upper left of the source image
;  DESTINATION is the upper left of the destination image
;  WIDTH is one quarter of the width of the source image
;  HEIGHT is the height of the source image
;  BYTES_PER_ROW is the bytes_per_row of the destination image
;  SOURCE_SLOP is source_bytes_per_row-source_width
;  DESTINATION_SLOP is 2*destination_bytes_per_row-destination_width
;  EVERY_OTHER_LINE does the astro-chase 3D thing
;--------------------------------------------------------------------

quadruple_screen	proc	export
	with	copy_screen_data

QUADRUPLE_SCREEN_REGS	reg	a2-a3/d2-d7

_DATA	equ	a0
_SOURCE	equ	a1
_DESTINATION1	equ	a2
_DESTINATION2	equ	a3

;d0,d1,d2 are used for pixel scrap
_DESTINATION_SLOP	equ	d4
_SOURCE_SLOP	equ	d5
_ROWS_LEFT	equ	d6
_COUNT	equ	d7

	move.l	4(a7),_DATA
	movem.l	QUADRUPLE_SCREEN_REGS,-(a7)
	
	;initialize source and both destination pointers
	movea.l	source(_DATA),_SOURCE
	movea.l	destination(_DATA),_DESTINATION1
	movea.l	destination(_DATA),_DESTINATION2
	adda.w	bytes_per_row(_DATA),_DESTINATION2
	
	;initialize slops
	move.w	destination_slop(_DATA),_DESTINATION_SLOP
	move.w	source_slop(_DATA),_SOURCE_SLOP
	
	;initialize height
	move.w	height(_DATA),_ROWS_LEFT
	subq.w	#1,_ROWS_LEFT

copy_row
	move.w	width(_DATA),_COUNT
	subq.w	#1,_COUNT
	
	btst.b	#SIXTEEN_BIT_BIT,flags(_DATA)
	bne.s	expand4pixels16bit
	btst.b	#THIRTYTWO_BIT_BIT,flags(_DATA)
	bne	expand4pixels32bit
	btst.b	#EVERY_OTHER_LINE_BIT,flags(_DATA)
	bne.s	expand4pixels_skip

expand4pixels
	;get a long (4 pixels) from the source and expand it into two longs
	;(8 pixels) and write it to both destinations.  if we could spread
	;out our long writes (space them inside the loop) we get an extra
	;frame and a half per second on my IIfx, but I can’t figure out how
	;to make that work correctly.  This loop is critical, our fps almost
	;doubles if we draw the window 1:1, instead of 1:2 (!)
	move.l	(_SOURCE)+,d0
	move.l	d0,d1
	move.l	d1,d2
	swap	d1
	move.w	d1,d2
	ror.w	#8,d2
	ror.l	#8,d2
	move.l	d2,(_DESTINATION1)+
	move.w	d0,d1
	ror.w	#8,d1
	move.l	d2,(_DESTINATION2)+
	ror.l	#8,d1
	move.l	d1,(_DESTINATION1)+
	move.l	d1,(_DESTINATION2)+
	dbf	_COUNT,expand4pixels
	
	;add slops and repeat if necessary
	adda.w	_SOURCE_SLOP,_SOURCE
	adda.w	_DESTINATION_SLOP,_DESTINATION1
	adda.w	_DESTINATION_SLOP,_DESTINATION2
	dbf	_ROWS_LEFT,copy_row
	bra.s	quadruple_done

expand4pixels_skip
	move.l	(_SOURCE)+,d0
	move.l	d0,d1
	move.l	d1,d2
	swap	d1
	move.w	d1,d2
	ror.w	#8,d2
	ror.l	#8,d2
	move.l	d2,(_DESTINATION1)+
	move.w	d0,d1
	ror.w	#8,d1
	ror.l	#8,d1
	move.l	d1,(_DESTINATION1)+
	dbf	_COUNT,expand4pixels_skip
	
	;add slops and repeat if necessary
	adda.w	_SOURCE_SLOP,_SOURCE
	adda.w	_DESTINATION_SLOP,_DESTINATION1
	adda.w	_DESTINATION_SLOP,_DESTINATION2
	dbf	_ROWS_LEFT,copy_row
	bra.s	quadruple_done

expand4pixels16bit
	;get a long (4 pixels) from the source and expand it into two longs
	;(8 pixels) and write it to both destinations.  if we could spread
	;out our long writes (space them inside the loop) we get an extra
	;frame and a half per second on my IIfx, but I can’t figure out how
	;to make that work correctly.  This loop is critical, our fps almost
	;doubles if we draw the window 1:1, instead of 1:2 (!)
	move.l	(_SOURCE)+,d0
	move.l	d0,d1
	move.l	d1,d2
	swap	d1
	move.w	d1,d2
	move.l	d2,(_DESTINATION1)+
	move.l	d2,(_DESTINATION2)+
	move.w	d0,d1
	move.l	d1,(_DESTINATION1)+
	move.l	d1,(_DESTINATION2)+
	dbf	_COUNT,expand4pixels16bit
	
	;add slops and repeat if necessary
	adda.w	_SOURCE_SLOP,_SOURCE
	adda.w	_DESTINATION_SLOP,_DESTINATION1
	adda.w	_DESTINATION_SLOP,_DESTINATION2
	dbf	_ROWS_LEFT,copy_row
	bra.s	quadruple_done

expand4pixels32bit
	move.l	(_SOURCE)+,d0
	move.l	d0,(_DESTINATION1)+
	move.l	d0,(_DESTINATION2)+
	move.l	d0,(_DESTINATION1)+
	move.l	d0,(_DESTINATION2)+
	dbf	_COUNT,expand4pixels32bit
	
	;add slops and repeat if necessary
	adda.w	_SOURCE_SLOP,_SOURCE
	adda.w	_DESTINATION_SLOP,_DESTINATION1
	adda.w	_DESTINATION_SLOP,_DESTINATION2
	dbf	_ROWS_LEFT,copy_row

quadruple_done
	movem.l	(a7)+,QUADRUPLE_SCREEN_REGS
	rts

;	symbol	quadruple_screen
	
	endwith
	endproc

;--------------------------------------------------------------------
;COPY_SCREEN
;  SOURCE is the upper left pixel of the source image
;  DESTINATION is the upper left pixel of the destination image
;  WIDTH is the width of both images divided by sixteen (!)
;  HEIGHT is the height of both images
;  SOURCE_SLOP is source_bytes_per_row-source_width
;  DESTINATION_SLOP is destination_bytes_per_row-destination_width
;--------------------------------------------------------------------

copy_screen	proc	export
	with	copy_screen_data

COPY_SCREEN_REGS	reg	a2/d2-d4

_DATA	equ	a0
_SOURCE	equ	a1
_DESTINATION	equ	a2

_SOURCE_SLOP	equ	d0
_DESTINATION_SLOP	equ	d1
_COUNT	equ	d2
_ROWS_LEFT	equ	d3
_WIDTH	equ	d4

	move.l	4(a7),_DATA
	movem.l	COPY_SCREEN_REGS,-(a7)

	;initialize source and destination pointers
	movea.l	source(_DATA),_SOURCE
	movea.l	destination(_DATA),_DESTINATION

	;initialize count4 and count16
	move.w	width(_DATA),_WIDTH
	subq.w	#1,_WIDTH
	
	;initialize height
	move.w	height(_DATA),_ROWS_LEFT
	subq.w	#1,_ROWS_LEFT
	
	;initialize slops
	move.w	source_slop(_DATA),_SOURCE_SLOP
	move.w	destination_slop(_DATA),_DESTINATION_SLOP
	
copy_row
	move.w	_WIDTH,_COUNT
copy16
	;copy 16 bytes at a time
	move.l	(_SOURCE)+,(_DESTINATION)+
	move.l	(_SOURCE)+,(_DESTINATION)+
	move.l	(_SOURCE)+,(_DESTINATION)+
	move.l	(_SOURCE)+,(_DESTINATION)+
	dbf	_COUNT,copy16

	;add slops and repeat
	adda.w	_DESTINATION_SLOP,_DESTINATION
	adda.w	_SOURCE_SLOP,_SOURCE
	dbf	_ROWS_LEFT,copy_row
	
	;bail
	movem.l	(a7)+,COPY_SCREEN_REGS
	rts

;	symbol	copy_screen
	
	endwith
	endproc
	
	end

expand4pixels_start
	addq.w	#1, _COUNT
	lsr.w	#1, _COUNT
	subq.w	#1, _COUNT
	
	move.l	(_SOURCE)+, d0
	move.l	d0, d3
	move.l	d0, d2
	swap	d3
	move.w	d3, d2
	ror.w	#8, d2
	ror.l	#8, d2
	move.w	d0, d3
	move.l	d2, (_DESTINATION1)+
	ror.w	#8, d3
	ror.l	#8, d3
	move.l	d2, (_DESTINATION2)+

expand4pixels
	move.l	(_SOURCE)+, d0
	move.l	d0, d1
	move.l	d0, d2
	move.l	d3, (_DESTINATION1)+
	swap	d1
	move.w	d1, d2
	ror.w	#8, d2
	move.l	d3, (_DESTINATION2)+
	ror.l	#8, d2
	move.w	d0, d1
	move.l	d2, (_DESTINATION1)+
	ror.w	#8, d1
	ror.l	#8, d1
	move.l	d2, (_DESTINATION2)+

	move.l	(_SOURCE)+, d0
	move.l	d0, d3
	move.l	d0, d2
	move.l	d1, (_DESTINATION1)+
	swap	d3
	move.w	d3, d2
	move.l	d1, (_DESTINATION2)+
	ror.w	#8, d2
	ror.l	#8, d2
	move.w	d0, d3
	move.l	d2, (_DESTINATION1)+
	ror.w	#8, d3
	ror.l	#8, d3
	move.l	d2, (_DESTINATION2)+

	dbf	_COUNT, expand4pixels
	
	;clean up
	move.l	d3, (_DESTINATION1)+
	move.l	d3, (_DESTINATION2)+
;old way
