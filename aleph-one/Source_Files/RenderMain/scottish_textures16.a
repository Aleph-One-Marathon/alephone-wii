;SCOTTISH_TEXTURES.A
;
;	Copyright (C) 1991-2001 and beyond by Bungie Studios, Inc.
;	and the "Aleph One" developers.
; 
;	This program is free software; you can redistribute it and/or modify
;	it under the terms of the GNU General Public License as published by
;	the Free Software Foundation; either version 3 of the License, or
;	(at your option) any later version.
;
;	This program is distributed in the hope that it will be useful,
;	but WITHOUT ANY WARRANTY; without even the implied warranty of
;	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;	GNU General Public License for more details.
;
;	This license is contained in the file "GNU_GeneralPublicLicense.txt",
;	which is included with this source code; it is available online at
;	http://www.gnu.org/licenses/gpl.html
;
;Saturday, July 16, 1994 1:52:50 PM

;Saturday, March 18, 1995 12:02:22 AM  (Jason')
;  doing multiple-column maps didn’t seem to help any/much

							machine	mc68020
							string	c

							include	'cseries.a'
							include 'traps.a'

							seg		'texture'

; ----------------------------------------------------------------------------------------
; bitmap_definition structure
; ----------------------------------------------------------------------------------------

;struct bitmap_definition
;{
;	short width, height; /* in pixels */
;	short bytes_per_row; /* if ==NONE this is a transparent RLE shape */
;	
;	short flags; /* [column_order.1] [unused.15] */
;	short bit_depth; /* should always be ==8 */
;	
;	short unused[8];
;	
;	pixel8 *row_addresses[1];
;};

bitmap_definition			record	0
width						ds.w	1
height						ds.w	1
bytes_per_row				ds.w	1
flags						ds.w	1
bit_depth					ds.w	1
							ds.w	8
row_addresses				equ		*
							endr

; ----------------------------------------------------------------------------------------
; _TEXTURE_HORIZONTAL_POLYGON_LINES
;
;	static void _texture_horizontal_polygon_lines(struct polygon_definition *polygon,
;		struct bitmap_definition *screen, struct view_data *view, struct _horizontal_polygon_line_data *data,
;		short y0, short *x0_table, short *x1_table, short line_count);
; ----------------------------------------------------------------------------------------

DOWNSHIFT					equ		$19

_texture_horizontal_polygon_lines16 proc	export

;struct _horizontal_polygon_line_data /* 32 bytes */
;{
;	word flags; /* [expand.1] [vertical.1] [unused.14] */
;	
;	unsigned long source_x, source_y;
;	unsigned long source_dx, source_dy;
;	
;	pixel8 *shading_table;
;};

line_data					record	0
source_x					ds.l	1
source_y					ds.l	1
source_dx					ds.l	1
source_dy					ds.l	1
shading_table				ds.l	1
LINE_DATA_SIZE				equ		*
							endr

stack_frame					record	{a6_link},DECR
FIRST_PARAMETER				equ		*
line_count					ds.l	1
x1_table					ds.l	1
x0_table					ds.l	1
y0							ds.l	1
data						ds.l	1
							ds.l	1	;view (unused)
screen						ds.l	1
texture						ds.l	1
PARAMETER_SIZE				equ		FIRST_PARAMETER-*
return_address				ds.l	1
a6_link						ds.l	1
LOCAL_SIZE					equ		*
							endr

REGISTERS					reg		d3-d7/a2-a4

							with	stack_frame
							
							link	a6,#LOCAL_SIZE
							movem.l	REGISTERS,-(sp)

							bra.s	end_line

texture_line

_X0							equ		d0
_X1							equ		d1
_Y							equ		d2

							;get x0 for this line and postincrement the x0_table
							move.l	x0_table(a6),a0
							move.w	(a0)+,_X0
							move.l	a0,x0_table(a6)
							
							;get x1 for this line and postincrement the x1_table
							move.l	x1_table(a6),a0
							move.w	(a0)+,_X1
							move.l	a0,x1_table(a6)
							
							;get y for this line and postincrement it
							move.l	y0(a6),_Y
							addq.l	#1,y0(a6)
							
_OFFSET						equ		d0	;scratch until inner loop
_PIXEL						equ		d1	;scratch until inner loop
_SHIFT_COUNT				equ		d2	;scratch until inner loop
_SOURCE_Y					equ		d3
_SOURCE_DY					equ		d4
_SOURCE_X					equ		d5
_SOURCE_DX					equ		d6
_COUNT						equ		d7

_READ_ADDRESS				equ		a0	;scratch until inner loop
_ROW_ADDRESSES				equ		a1
_WRITE_ADDRESS				equ		a2
_SHADING_TABLE				equ		a3
							
							with	bitmap_definition

							;initialize a pointer to the texture’s row_address table
							move.l	texture(a6),a0
							lea		row_addresses(a0),_ROW_ADDRESSES
;							move.l	(_ROW_ADDRESSES), _ROW_ADDRESSES

							;initialize a pointer to the right place on the screen
							move.l	screen(a6),a0
							lea		row_addresses(a0),a0
							move.l	(a0,_Y.w*4),_WRITE_ADDRESS
							add.w	_X0,_WRITE_ADDRESS
							add.w	_X0,_WRITE_ADDRESS
							
							endwith
							
							;initialize source_x, source_y, source_dx, source_dy and shading_table
							;from the line_data structure, then postincrement it
							with	line_data
							move.l	data(a6),a0
							move.l	shading_table(a0),_SHADING_TABLE
							move.l	source_x(a0),_SOURCE_X
							move.l	source_y(a0),_SOURCE_Y
							move.l	source_dx(a0),_SOURCE_DX
							move.l	source_dy(a0),_SOURCE_DY
							add.w	#LINE_DATA_SIZE,a0
							move.l	a0,data(a6)
							endwith
							
							;initialize _COUNT (x1-x0 minus one)
							move.w	_X1,_COUNT
							sub.w	_X0,_COUNT
							subq	#1,_COUNT
							bmi.s	end_line
							
							;zero _PIXEL and initialize _SHIFT_COUNT
							moveq	#0,_PIXEL
							moveq	#DOWNSHIFT,_SHIFT_COUNT
texture_pixel
							move.l	_SOURCE_Y,_OFFSET
							lsr.l	_SHIFT_COUNT,_OFFSET
;							lsl.l	#7, _OFFSET
;							lea		(_ROW_ADDRESSES, _OFFSET), _READ_ADDRESS
							move.l	(_ROW_ADDRESSES,_OFFSET.w*4),_READ_ADDRESS
							move.l	_SOURCE_X,_OFFSET
							lsr.l	_SHIFT_COUNT,_OFFSET
							move.b	(_READ_ADDRESS,_OFFSET.w),_PIXEL
							add.l	_SOURCE_DX,_SOURCE_X
							add.l	_SOURCE_DY,_SOURCE_Y
							move.w	(_SHADING_TABLE,_PIXEL.w*2),(_WRITE_ADDRESS)+
							dbf		_COUNT,texture_pixel

end_line
							subq.l	#1,line_count(a6)
							bge.s	texture_line

							movem.l	(sp)+,REGISTERS
							unlk	a6
							rts

							;symbol	_texture_horizontal_polygon_lines16

							endwith
							endproc
							
_texture_vertical_polygon_lines16 proc	export

_SCREEN						equ		a0
_TEXTURE0					equ		a1
_SHADING0					equ		a2
_TEXTURE1					equ		a3
_SHADING1					equ		a4
_DATA						equ		a5

_SCRATCH					equ		d0
_COUNT						equ		d1
_TEXTURE_Y0					equ		d2
_TEXTURE_DY0				equ		d3
_TEXTURE_Y1					equ		d4
_TEXTURE_DY1				equ		d5
_DOWNSHIFT					equ		d6
_BYTES_PER_ROW				equ		d7

REGISTERS					reg		d3-d7/a2-a5

;struct _vertical_polygon_data
;{
;	short downshift;
;	short x0;
;	short width;
;	
;	short pad;
;};
line_header					record	0
downshift					ds.w	1
x0							ds.w	1
width						ds.w	1
							ds.w	1	;pad
LINE_HEADER_SIZE			equ		*
							endr

;struct _vertical_polygon_line_data
;{
;	void *shading_table;
;	pixel8 *texture;
;	long texture_y, texture_dy;
;};
line						record	0
shading_table				ds.l	1
texture						ds.l	1
texture_y					ds.l	1
texture_dy					ds.l	1
LINE_SIZE					equ		*
							endr

;static void TEXTURE_VERTICAL_POLYGON_LINES(
;	struct bitmap_definition *screen,
;	struct view_data *view,
;	struct _vertical_polygon_data *data,
;	short *y0_table,
;	short *y1_table)
stack_frame					record	{a6_link},DECR
FIRST_PARAMETER				equ		*
y1_table					ds.l	1
y0_table					ds.l	1
data						ds.l	1
							ds.l	1	;view (unused)
screen						ds.l	1
PARAMETER_SIZE				equ		FIRST_PARAMETER-*
return_address				ds.l	1
a6_link						ds.l	1
line_count					ds.w	1
x							ds.w	1
LOCAL_SIZE					equ		*
							endr

							with	stack_frame
							
							link	a6,#LOCAL_SIZE
							movem.l	REGISTERS,-(sp)

;process the line header
							with	line_header
							move.l	data(a6), _DATA
							move.w	downshift(_DATA), _DOWNSHIFT
							move.w	x0(_DATA), x(a6)
							move.w	width(_DATA), line_count(a6)
							addq.l	#LINE_HEADER_SIZE, _DATA
							endwith

;get screen bytes per row
							with	bitmap_definition
							move.l	screen(a6), a0
							move.w	bytes_per_row(a0), _BYTES_PER_ROW
							endwith

next_column
							move.w	line_count(a6), d0
							beq.s	end
							
;							cmpi.w	#2, d0
;							blt		single_start
;							move.w	x(a6), d0
;							andi.w	#1, d0
;							beq		parallel_start

_Y0							equ		d0
_Y1							equ		d1

;do a single row when line_count<2 or x is not a multiple of 2
single_start
							move.l	y0_table(a6), a0
							move.w	(a0), _Y0
							move.l	y1_table(a6), a0
							move.w	(a0), _Y1
							
							with	bitmap_definition
							move.l	screen(a6), a0
							lea		row_addresses(a0), a0
							move.l	(a0, _Y0.w*4), _SCREEN
							add.w	x(a6), _SCREEN
							add.w	x(a6), _SCREEN
							endwith
							
;grab variables from line
							with	line
							move.l	shading_table(_DATA), _SHADING0
							move.l	texture(_DATA), _TEXTURE0
							move.l	texture_y(_DATA), _TEXTURE_Y0
							move.l	texture_dy(_DATA), _TEXTURE_DY0
							add.l	#LINE_SIZE, _DATA
							endwith

;(count==y1)= y1-y0-1
							sub.w	_Y0, _Y1
							subq.w	#1, _COUNT
							bmi.s	single_map_end
							
single_map
							move.l	_TEXTURE_Y0, _SCRATCH
							lsr.l	_DOWNSHIFT, _SCRATCH
							move.b	(_TEXTURE0, _SCRATCH.w), _SCRATCH
							add.l	_TEXTURE_DY0, _TEXTURE_Y0
							move.w	(_SHADING0, _SCRATCH.w*2), (_SCREEN)
							add.w	_BYTES_PER_ROW, _SCREEN
							dbf		_COUNT, single_map

single_map_end
;adjust x, line, line_count, y0_table, y1_table
							addq.l	#2, y0_table(a6)
							addq.l	#2, y1_table(a6)
							subq.w	#1, line_count(a6)
							addq.w	#1, x(a6)
							bra.s	next_column
							
end
							movem.l	(sp)+, REGISTERS
							unlk	a6
							rts

							;symbol	_texture_vertical_polygon_lines16

							endproc

_transparent_texture_vertical_polygon_lines16 proc	export

_SCREEN						equ		a0
_TEXTURE0					equ		a1
_SHADING0					equ		a2
_TEXTURE1					equ		a3
_SHADING1					equ		a4
_DATA						equ		a5

_SCRATCH					equ		d0
_COUNT						equ		d1
_TEXTURE_Y0					equ		d2
_TEXTURE_DY0				equ		d3
_TEXTURE_Y1					equ		d4
_TEXTURE_DY1				equ		d5
_DOWNSHIFT					equ		d6
_BYTES_PER_ROW				equ		d7

REGISTERS					reg		d3-d7/a2-a5

;struct _vertical_polygon_data
;{
;	short downshift;
;	short x0;
;	short width;
;	
;	short pad;
;};
line_header					record	0
downshift					ds.w	1
x0							ds.w	1
width						ds.w	1
							ds.w	1	;pad
LINE_HEADER_SIZE			equ		*
							endr

;struct _vertical_polygon_line_data
;{
;	void *shading_table;
;	pixel8 *texture;
;	long texture_y, texture_dy;
;};
line						record	0
shading_table				ds.l	1
texture						ds.l	1
texture_y					ds.l	1
texture_dy					ds.l	1
LINE_SIZE					equ		*
							endr

;static void TEXTURE_VERTICAL_POLYGON_LINES(
;	struct bitmap_definition *screen,
;	struct view_data *view,
;	struct _vertical_polygon_data *data,
;	short *y0_table,
;	short *y1_table)
stack_frame					record	{a6_link},DECR
FIRST_PARAMETER				equ		*
y1_table					ds.l	1
y0_table					ds.l	1
data						ds.l	1
							ds.l	1	;view (unused)
screen						ds.l	1
PARAMETER_SIZE				equ		FIRST_PARAMETER-*
return_address				ds.l	1
a6_link						ds.l	1
line_count					ds.w	1
x							ds.w	1
LOCAL_SIZE					equ		*
							endr

							with	stack_frame
							
							link	a6,#LOCAL_SIZE
							movem.l	REGISTERS,-(sp)

;process the line header
							with	line_header
							move.l	data(a6), _DATA
							move.w	downshift(_DATA), _DOWNSHIFT
							move.w	x0(_DATA), x(a6)
							move.w	width(_DATA), line_count(a6)
							addq.l	#LINE_HEADER_SIZE, _DATA
							endwith

;get screen bytes per row
							with	bitmap_definition
							move.l	screen(a6), a0
							move.w	bytes_per_row(a0), _BYTES_PER_ROW
							endwith

next_column
							move.w	line_count(a6), d0
							beq.s	end
							
;							cmpi.w	#2, d0
;							blt		single_start
;							move.w	x(a6), d0
;							andi.w	#1, d0
;							beq		parallel_start

_Y0							equ		d0
_Y1							equ		d1

;do a single row when line_count<2 or x is not a multiple of 2
single_start
							move.l	y0_table(a6), a0
							move.w	(a0), _Y0
							move.l	y1_table(a6), a0
							move.w	(a0), _Y1
							
							with	bitmap_definition
							move.l	screen(a6), a0
							lea		row_addresses(a0), a0
							move.l	(a0, _Y0.w*4), _SCREEN
							add.w	x(a6), _SCREEN
							add.w	x(a6), _SCREEN
							endwith
							
;grab variables from line
							with	line
							move.l	shading_table(_DATA), _SHADING0
							move.l	texture(_DATA), _TEXTURE0
							move.l	texture_y(_DATA), _TEXTURE_Y0
							move.l	texture_dy(_DATA), _TEXTURE_DY0
							add.l	#LINE_SIZE, _DATA
							endwith

;(count==y1)= y1-y0-1
							sub.w	_Y0, _Y1
							subq.w	#1, _COUNT
							bmi.s	single_map_end
							
single_map
							move.l	_TEXTURE_Y0, _SCRATCH
							lsr.l	_DOWNSHIFT, _SCRATCH
							move.b	(_TEXTURE0, _SCRATCH.w), _SCRATCH
							beq.s	skip_pixel
							move.w	(_SHADING0, _SCRATCH.w*2), (_SCREEN)
skip_pixel
							add.l	_TEXTURE_DY0, _TEXTURE_Y0
							add.w	_BYTES_PER_ROW, _SCREEN
							dbf		_COUNT, single_map

single_map_end
;adjust x, line, line_count, y0_table, y1_table
							addq.l	#2, y0_table(a6)
							addq.l	#2, y1_table(a6)
							subq.w	#1, line_count(a6)
							addq.w	#1, x(a6)
							bra.s	next_column
							
end
							movem.l	(sp)+, REGISTERS
							unlk	a6
							rts

							;symbol	_transparent_texture_vertical_polygon_lines16

							endproc
							
							end

;--------------------------

parallel_start
;grab variables from lines
							with	line
							move.l	shading_table(_DATA), _SHADING0
							move.l	texture(_DATA), _TEXTURE0
							move.l	texture_y(_DATA), _TEXTURE_Y0
							move.l	texture_dy(_DATA), _TEXTURE_DY0
							add.l	#LINE_SIZE, _DATA
							move.l	shading_table(_DATA), _SHADING1
							move.l	texture(_DATA), _TEXTURE1
							move.l	texture_y(_DATA), _TEXTURE_Y1
							move.l	texture_dy(_DATA), _TEXTURE_DY1
							add.l	#LINE_SIZE, _DATA
							endwith

;get the screen address of the highest line
							move.l	y0_table(a6), a0
							move.w	0(a0), _Y0
							cmp.w	1(a0), _Y0
							blt.s	@1
							move.w	1(a0), _Y0
@1
							with	bitmap_definition
							move.l	screen(a6), a0
							lea		row_addresses(a0), a0
							move.l	(a0, _Y0.w*4), _SCREEN
							add.w	x(a6), _SCREEN
							endwith
							
sync0
							move.l	_TEXTURE_Y0, _SCRATCH
							lsr.l	_DOWNSHIFT, _SCRATCH
							move.b	(_TEXTURE0, _SCRATCH.w), _SCRATCH
							add.l	_TEXTURE_DY0, _TEXTURE_Y0
							move.b	(_SHADING0, _SCRATCH.w), 0(_SCREEN)
							add.w	_BYTES_PER_ROW, _SCREEN
							dbf		_COUNT, sync0

sync1
							move.l	_TEXTURE_Y1, _SCRATCH
							lsr.l	_DOWNSHIFT, _SCRATCH
							move.b	(_TEXTURE1, _SCRATCH.w), _SCRATCH
							add.l	_TEXTURE_DY1, _TEXTURE_Y1
							move.b	(_SHADING1, _SCRATCH.w), 1(_SCREEN)
							add.w	_BYTES_PER_ROW, _SCREEN
							dbf		_COUNT, sync1
							
;(count==y1)= y1-y0-1
							sub.w	_Y0, _Y1
							subq.w	#1, _COUNT
							bmi.s	parallel_map_end
							
parallel_map
							move.l	_TEXTURE_Y0, _SCRATCH
							lsr.l	_DOWNSHIFT, _SCRATCH
							move.b	(_TEXTURE0, _SCRATCH.w), _SCRATCH
							add.l	_TEXTURE_DY0, _TEXTURE_Y0
							move.b	(_SHADING0, _SCRATCH.w), 0(_SCREEN)

							move.l	_TEXTURE_Y1, _SCRATCH
							lsr.l	_DOWNSHIFT, _SCRATCH
							move.b	(_TEXTURE1, _SCRATCH.w), _SCRATCH
							add.l	_TEXTURE_DY1, _TEXTURE_Y1
							move.b	(_SHADING1, _SCRATCH.w), 1(_SCREEN)

							add.w	_BYTES_PER_ROW, _SCREEN
							dbf		_COUNT, single_map

parallel_map_end
;adjust x, line, line_count, y0_table, y1_table
							addq.l	#4, y0_table(a6)
							addq.l	#4, y1_table(a6)
							subq.w	#2, line_count(a6)
							addq.w	#2, x(a6)
							bra.s	next_column

desync0
							move.l	_TEXTURE_Y0, _SCRATCH
							lsr.l	_DOWNSHIFT, _SCRATCH
							move.b	(_TEXTURE0, _SCRATCH.w), _SCRATCH
							add.l	_TEXTURE_DY0, _TEXTURE_Y0
							move.b	(_SHADING0, _SCRATCH.w), 0(_SCREEN)
							add.w	_BYTES_PER_ROW, _SCREEN
							dbf		_COUNT, desync0

desync1
							move.l	_TEXTURE_Y1, _SCRATCH
							lsr.l	_DOWNSHIFT, _SCRATCH
							move.b	(_TEXTURE1, _SCRATCH.w), _SCRATCH
							add.l	_TEXTURE_DY1, _TEXTURE_Y1
							move.b	(_SHADING1, _SCRATCH.w), 1(_SCREEN)
							add.w	_BYTES_PER_ROW, _SCREEN
							dbf		_COUNT, desync1
