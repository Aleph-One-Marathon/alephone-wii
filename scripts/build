#!/bin/bash

source setup-build-env.sh

########################################################################
# Usage

function printUsage {
	echo
	echo "Usage : `basename $0` project_path [configure option]... [option]..."
	echo
	echo "Project path : path where lies the configure script of the project to build"
	echo
	echo "Configure options : passed to the configure script of the project to build"
	echo
	echo "Options (default values inside brackets) :"
	echo "    -c, --compile-mode=[release| ]    Compile in debug mode [debug]"
	echo "    -C, --run-configure=[no| ]        Run the configure step [yes]"
	echo "    -M, --run-make=[no| ]             Run the make step [yes]"
	echo "    -v, --verbose                     Redirect compilations log to the console instead of log files"
	echo "    -h, --help                        Display this help message"
	echo
}

########################################################################
# Parse options

if [ -z "$1" ]; then
  printUsage
  exit -1
fi

PROJECT_SOURCES_PATH=$(getAbsolutePath $1)
PROJECT_NAME=$(basename ${PROJECT_SOURCES_PATH})
shift

VERBOSE="false"
COMPILE_MODE="debug"
RUN_CONFIGURE="true"
RUN_MAKE="true"

while test $# -gt 0; do
	case $1 in
		-*=*) optarg=`echo "$1" | LC_ALL="C" sed 's/[-_a-zA-Z0-9]*=//'` ;;
		*) optarg= ;;
	esac

	case $1 in
		-c=* | --compile-mode=*) [ "$optarg" == "release" ] && COMPILE_MODE="release" ;;
		-C=* | --run-configure=*) [ "$optarg" == "no" ] && RUN_CONFIGURE="false" ;;
		-M=* | --run-make=*) [ "$optarg" == "no" ] && RUN_MAKE="false" ;;
		-v | --verbose) VERBOSE="true" ;;
		-h | --help) printUsage; exit 0 ;;
		*) CONFIGURE_OPTIONS="${CONFIGURE_OPTIONS} $1" ;;
	esac
	shift
done

########################################################################
# Setup logging

echo
echo "### ${PROJECT_NAME}'s build progress :"

PROJECT_BUILD_PATH=${BUILD_PATH}/${PROJECT_NAME}
mkdir -p ${PROJECT_BUILD_PATH}

LOG_FILE=$(getAbsolutePath ${PROJECT_BUILD_PATH}/build.log)
rm -f ${LOG_FILE}

if [ ${VERBOSE} == "false" ]; then
	echo "Logging to ${LOG_FILE}"
	LOGGING_REDIRECTION=">> ${LOG_FILE} 2>&1"
fi

########################################################################
# Setup build optimisations

if [ ${COMPILE_MODE} == "debug" ]; then
	OPTIMS="-g"
else
	OPTIMS="-O3 -ffunction-sections -fdata-sections -fmodulo-sched"
fi

export CFLAGS="${CFLAGS} ${OPTIMS}"
export CXXFLAGS="${CXXFLAGS} ${OPTIMS}"

########################################################################
# Prepare

if [ ${RUN_CONFIGURE} == "true" ]; then
	echo "Creating ${PROJECT_NAME}'s configure scripts..."
	silentPushd ${PROJECT_SOURCES_PATH}

	export NO_CONFIGURE="true"
	eval "./autogen.sh ${LOGGING_REDIRECTION}"

	failOnError "Unable to create ${PROJECT_NAME}'s configure scripts."
	silentPopd
fi

########################################################################
# Configure

if [ ${RUN_CONFIGURE} == "true" ]; then
	BUILD_SYSTEM=`./config.guess`
	echo "Configuring ${PROJECT_NAME}'s build process..."
	silentPushd ${PROJECT_BUILD_PATH}

	eval "${PROJECT_SOURCES_PATH}/configure --host=powerpc-eabi \
	--target=powerpc-eabi --build=${BUILD_SYSTEM} \
	${CONFIGURE_OPTIONS} ${LOGGING_REDIRECTION}"

	failOnError "Unable to configure ${PROJECT_NAME}'s build process."
	silentPopd
fi

########################################################################
# Build

if [ ${RUN_MAKE} == "true" ]; then
	echo "Building ${PROJECT_NAME}..."
	silentPushd ${PROJECT_BUILD_PATH}

	eval "make install ${LOGGING_REDIRECTION}"

	failOnError "Unable to build ${PROJECT_NAME}."
	silentPopd
fi
